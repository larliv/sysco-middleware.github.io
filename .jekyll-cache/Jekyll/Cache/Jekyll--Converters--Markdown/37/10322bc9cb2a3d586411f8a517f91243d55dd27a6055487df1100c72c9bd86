I"K{<p>Now we will learn how to change dynamically some MAF AMX components.
There we go:</p>

<h2 id="create-classes">Create classes</h2>

<p>To start with the table structure we are going to create one class for the entire table called TableSum and other for the cells called CellNumber.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TableSum</span> <span class="o">{</span>
    
    
    <span class="nc">CellNumber</span><span class="o">[]</span> <span class="nc">TableRow1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CellNumber</span><span class="o">[</span><span class="mi">5</span><span class="o">];</span>
    <span class="nc">CellNumber</span><span class="o">[]</span> <span class="nc">TableRow2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CellNumber</span><span class="o">[</span><span class="mi">5</span><span class="o">];</span>
    <span class="nc">CellNumber</span><span class="o">[]</span> <span class="nc">TableRow3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CellNumber</span><span class="o">[</span><span class="mi">5</span><span class="o">];</span>
    <span class="nc">CellNumber</span><span class="o">[]</span> <span class="nc">TableRow4</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CellNumber</span><span class="o">[</span><span class="mi">5</span><span class="o">];</span>
    <span class="nc">CellNumber</span><span class="o">[]</span> <span class="nc">TableRow5</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CellNumber</span><span class="o">[</span><span class="mi">5</span><span class="o">];</span>
    <span class="nc">CellNumber</span><span class="o">[]</span> <span class="nc">TableRow6</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CellNumber</span><span class="o">[</span><span class="mi">5</span><span class="o">];</span>
    <span class="nc">CellNumber</span><span class="o">[]</span> <span class="nc">TableRow7</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CellNumber</span><span class="o">[</span><span class="mi">5</span><span class="o">];</span>
    <span class="nc">CellNumber</span><span class="o">[]</span> <span class="nc">TableRow8</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CellNumber</span><span class="o">[</span><span class="mi">5</span><span class="o">];</span>
    <span class="nc">CellNumber</span><span class="o">[]</span> <span class="nc">TableRow9</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CellNumber</span><span class="o">[</span><span class="mi">5</span><span class="o">];</span>
    <span class="nc">CellNumber</span><span class="o">[]</span> <span class="nc">TableRow10</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CellNumber</span><span class="o">[</span><span class="mi">5</span><span class="o">];</span>
	<span class="nc">String</span> <span class="n">resultSum</span><span class="o">=</span><span class="s">""</span><span class="o">;</span>
	
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CellNumber</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">number</span><span class="o">;</span>
    <span class="nc">String</span> <span class="n">color</span><span class="o">;</span>
</code></pre></div></div>

<p>Basically the table contains 10 rows and 5 columns. Every cell contains 2 fields a number and a color.</p>

<h3 id="create-data-controls">Create Data Controls</h3>

<p>To map the table class over the interface we will create one data control called TableSum.</p>

<ul>
  <li><img src="/images/2015-10-19-update-dynamically-amx-tablelayout/dataControlTableSum.jpg" alt="" /></li>
</ul>

<h3 id="create-tablelayout">Create TableLayout</h3>

<p>Now, we create a TableLayout and we should map every TableRow of Data Controls to each rowLayout.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nt">&lt;amx:tableLayout</span> <span class="na">id=</span><span class="s">"tl1"</span> <span class="na">borderWidth=</span><span class="s">"1"</span> <span class="na">width=</span><span class="s">"100%"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;amx:rowLayout</span> <span class="na">id=</span><span class="s">"rl1"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;amx:iterator</span> <span class="na">var=</span><span class="s">"row"</span> <span class="na">value=</span><span class="s">"#{bindings.tableRow11.collectionModel}"</span> <span class="na">id=</span><span class="s">"i1"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;amx:cellFormat</span> <span class="na">id=</span><span class="s">"cf1"</span> <span class="na">halign=</span><span class="s">"center"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;amx:outputText</span> <span class="na">value=</span><span class="s">"#{row.number}"</span> <span class="na">id=</span><span class="s">"ot2"</span> <span class="na">inlineStyle=</span><span class="s">"color:#{row.color};"</span><span class="nt">/&gt;</span>
          <span class="nt">&lt;/amx:cellFormat&gt;</span>
        <span class="nt">&lt;/amx:iterator&gt;</span>
      <span class="nt">&lt;/amx:rowLayout&gt;</span>
      <span class="nt">&lt;amx:rowLayout</span> <span class="na">id=</span><span class="s">"rl2"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;amx:iterator</span> <span class="na">var=</span><span class="s">"row"</span> <span class="na">value=</span><span class="s">"#{bindings.tableRow21.collectionModel}"</span> <span class="na">id=</span><span class="s">"i2"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;amx:cellFormat</span> <span class="na">id=</span><span class="s">"cf2"</span> <span class="na">halign=</span><span class="s">"center"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;amx:outputText</span> <span class="na">value=</span><span class="s">"#{row.number}"</span> <span class="na">id=</span><span class="s">"ot3"</span> <span class="na">inlineStyle=</span><span class="s">"color:#{row.color};"</span><span class="nt">/&gt;</span>
          <span class="nt">&lt;/amx:cellFormat&gt;</span>
        <span class="nt">&lt;/amx:iterator&gt;</span>
      <span class="nt">&lt;/amx:rowLayout&gt;</span>
      <span class="nt">&lt;amx:rowLayout</span> <span class="na">id=</span><span class="s">"rl3"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;amx:iterator</span> <span class="na">var=</span><span class="s">"row"</span> <span class="na">value=</span><span class="s">"#{bindings.tableRow31.collectionModel}"</span> <span class="na">id=</span><span class="s">"i3"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;amx:cellFormat</span> <span class="na">id=</span><span class="s">"cf3"</span> <span class="na">halign=</span><span class="s">"center"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;amx:outputText</span> <span class="na">value=</span><span class="s">"#{row.number}"</span> <span class="na">id=</span><span class="s">"ot4"</span> <span class="na">inlineStyle=</span><span class="s">"color:#{row.color};"</span><span class="nt">/&gt;</span>
          <span class="nt">&lt;/amx:cellFormat&gt;</span>
        <span class="nt">&lt;/amx:iterator&gt;</span>
      <span class="nt">&lt;/amx:rowLayout&gt;</span>
      <span class="nt">&lt;amx:rowLayout</span> <span class="na">id=</span><span class="s">"rl4"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;amx:iterator</span> <span class="na">var=</span><span class="s">"row"</span> <span class="na">value=</span><span class="s">"#{bindings.tableRow41.collectionModel}"</span> <span class="na">id=</span><span class="s">"i4"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;amx:cellFormat</span> <span class="na">id=</span><span class="s">"cf4"</span> <span class="na">halign=</span><span class="s">"center"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;amx:outputText</span> <span class="na">value=</span><span class="s">"#{row.number}"</span> <span class="na">id=</span><span class="s">"ot5"</span> <span class="na">inlineStyle=</span><span class="s">"color:#{row.color};"</span><span class="nt">/&gt;</span>
          <span class="nt">&lt;/amx:cellFormat&gt;</span>
        <span class="nt">&lt;/amx:iterator&gt;</span>
      <span class="nt">&lt;/amx:rowLayout&gt;</span>
      <span class="nt">&lt;amx:rowLayout</span> <span class="na">id=</span><span class="s">"rl5"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;amx:iterator</span> <span class="na">var=</span><span class="s">"row"</span> <span class="na">value=</span><span class="s">"#{bindings.tableRow5.collectionModel}"</span> <span class="na">id=</span><span class="s">"i5"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;amx:cellFormat</span> <span class="na">id=</span><span class="s">"cf5"</span> <span class="na">halign=</span><span class="s">"center"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;amx:outputText</span> <span class="na">value=</span><span class="s">"#{row.number}"</span> <span class="na">id=</span><span class="s">"ot6"</span> <span class="na">inlineStyle=</span><span class="s">"color:#{row.color};"</span><span class="nt">/&gt;</span>
          <span class="nt">&lt;/amx:cellFormat&gt;</span>
        <span class="nt">&lt;/amx:iterator&gt;</span>
      <span class="nt">&lt;/amx:rowLayout&gt;</span>
      <span class="nt">&lt;amx:rowLayout</span> <span class="na">id=</span><span class="s">"rl6"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;amx:iterator</span> <span class="na">var=</span><span class="s">"row"</span> <span class="na">value=</span><span class="s">"#{bindings.tableRow6.collectionModel}"</span> <span class="na">id=</span><span class="s">"i6"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;amx:cellFormat</span> <span class="na">id=</span><span class="s">"cf6"</span> <span class="na">halign=</span><span class="s">"center"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;amx:outputText</span> <span class="na">value=</span><span class="s">"#{row.number}"</span> <span class="na">id=</span><span class="s">"ot7"</span> <span class="na">inlineStyle=</span><span class="s">"color:#{row.color};"</span><span class="nt">/&gt;</span>
          <span class="nt">&lt;/amx:cellFormat&gt;</span>
        <span class="nt">&lt;/amx:iterator&gt;</span>
      <span class="nt">&lt;/amx:rowLayout&gt;</span>
      <span class="nt">&lt;amx:rowLayout</span> <span class="na">id=</span><span class="s">"rl7"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;amx:iterator</span> <span class="na">var=</span><span class="s">"row"</span> <span class="na">value=</span><span class="s">"#{bindings.tableRow7.collectionModel}"</span> <span class="na">id=</span><span class="s">"i7"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;amx:cellFormat</span> <span class="na">id=</span><span class="s">"cf7"</span> <span class="na">halign=</span><span class="s">"center"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;amx:outputText</span> <span class="na">value=</span><span class="s">"#{row.number}"</span> <span class="na">id=</span><span class="s">"ot8"</span> <span class="na">inlineStyle=</span><span class="s">"color:#{row.color};"</span><span class="nt">/&gt;</span>
          <span class="nt">&lt;/amx:cellFormat&gt;</span>
        <span class="nt">&lt;/amx:iterator&gt;</span>
      <span class="nt">&lt;/amx:rowLayout&gt;</span>
      <span class="nt">&lt;amx:rowLayout</span> <span class="na">id=</span><span class="s">"rl8"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;amx:iterator</span> <span class="na">var=</span><span class="s">"row"</span> <span class="na">value=</span><span class="s">"#{bindings.tableRow8.collectionModel}"</span> <span class="na">id=</span><span class="s">"i8"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;amx:cellFormat</span> <span class="na">id=</span><span class="s">"cf8"</span> <span class="na">halign=</span><span class="s">"center"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;amx:outputText</span> <span class="na">value=</span><span class="s">"#{row.number}"</span> <span class="na">id=</span><span class="s">"ot9"</span> <span class="na">inlineStyle=</span><span class="s">"color:#{row.color};"</span><span class="nt">/&gt;</span>
          <span class="nt">&lt;/amx:cellFormat&gt;</span>
        <span class="nt">&lt;/amx:iterator&gt;</span>
      <span class="nt">&lt;/amx:rowLayout&gt;</span>
      <span class="nt">&lt;amx:rowLayout</span> <span class="na">id=</span><span class="s">"rl9"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;amx:iterator</span> <span class="na">var=</span><span class="s">"row"</span> <span class="na">value=</span><span class="s">"#{bindings.tableRow9.collectionModel}"</span> <span class="na">id=</span><span class="s">"i9"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;amx:cellFormat</span> <span class="na">id=</span><span class="s">"cf9"</span> <span class="na">halign=</span><span class="s">"center"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;amx:outputText</span> <span class="na">value=</span><span class="s">"#{row.number}"</span> <span class="na">id=</span><span class="s">"ot10"</span> <span class="na">inlineStyle=</span><span class="s">"color:#{row.color};"</span><span class="nt">/&gt;</span>
          <span class="nt">&lt;/amx:cellFormat&gt;</span>
        <span class="nt">&lt;/amx:iterator&gt;</span>
      <span class="nt">&lt;/amx:rowLayout&gt;</span>
      <span class="nt">&lt;amx:rowLayout</span> <span class="na">id=</span><span class="s">"rl10"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;amx:iterator</span> <span class="na">var=</span><span class="s">"row"</span> <span class="na">value=</span><span class="s">"#{bindings.tableRow10.collectionModel}"</span> <span class="na">id=</span><span class="s">"i10"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;amx:cellFormat</span> <span class="na">id=</span><span class="s">"cf10"</span> <span class="na">halign=</span><span class="s">"center"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;amx:outputText</span> <span class="na">value=</span><span class="s">"#{row.number}"</span> <span class="na">id=</span><span class="s">"ot11"</span> <span class="na">inlineStyle=</span><span class="s">"color:#{row.color};"</span><span class="nt">/&gt;</span>
          <span class="nt">&lt;/amx:cellFormat&gt;</span>
        <span class="nt">&lt;/amx:iterator&gt;</span>
      <span class="nt">&lt;/amx:rowLayout&gt;</span>
    <span class="nt">&lt;/amx:tableLayout&gt;</span>
	
</code></pre></div></div>

<h3 id="add-action-button">Add action button</h3>

<p>To update programatically, we will add a button from a method that belongs to TableSum class called runAlgorithm.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">runAlgorithm</span><span class="o">(){</span>
        <span class="c1">// Modify the array's elements to now hold the sum  </span>
                <span class="c1">// of all the numbers that are above that element in its column </span>
        <span class="kt">int</span> <span class="no">N</span><span class="o">=</span><span class="mi">10</span><span class="o">,</span><span class="no">M</span><span class="o">=</span><span class="mi">5</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">max_ending_here</span><span class="o">,</span> <span class="n">max_so_far</span><span class="o">,</span> <span class="n">maximum</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">xBottom</span><span class="o">=</span><span class="mi">0</span><span class="o">,</span><span class="n">yBottom</span><span class="o">=</span><span class="mi">0</span><span class="o">,</span><span class="n">xTop</span><span class="o">=</span><span class="mi">0</span><span class="o">,</span><span class="n">yTop</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">xBottomAux</span><span class="o">=</span><span class="mi">0</span><span class="o">,</span><span class="n">yBottomAux</span><span class="o">=</span><span class="mi">0</span><span class="o">,</span><span class="n">xTopAux</span><span class="o">=</span><span class="mi">0</span><span class="o">,</span><span class="n">yTopAux</span><span class="o">=</span><span class="mi">0</span><span class="o">,</span><span class="n">yTopAuxOld</span><span class="o">=</span><span class="mi">0</span><span class="o">,</span><span class="n">yTopAuxNew</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>

            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">startx</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">startx</span> <span class="o">&lt;</span> <span class="no">N</span><span class="o">;</span> <span class="n">startx</span><span class="o">++)</span> <span class="o">{</span>
                <span class="kt">int</span> <span class="o">[]</span> <span class="n">sum</span><span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">];</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">startx</span><span class="o">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="no">N</span><span class="o">;</span> <span class="n">x</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="n">max_ending_here</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
                    <span class="n">max_so_far</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">;</span>
                    <span class="n">yTopAuxOld</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">yTopAuxNew</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
                    
                    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="no">M</span><span class="o">;</span> <span class="n">y</span><span class="o">++)</span> <span class="o">{</span>
                        <span class="n">sum</span><span class="o">[</span><span class="n">y</span><span class="o">]</span> <span class="o">+=</span> <span class="k">new</span> <span class="nc">Integer</span><span class="o">(</span><span class="nc">FullTable</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">].</span><span class="na">getNumber</span><span class="o">());</span>
                        
                        <span class="n">max_ending_here</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">max_ending_here</span> <span class="o">+</span> <span class="n">sum</span><span class="o">[</span><span class="n">y</span><span class="o">]);</span>
                        <span class="k">if</span> <span class="o">(</span><span class="mi">0</span><span class="o">==</span><span class="n">max_ending_here</span><span class="o">){</span>
                        
                            <span class="n">yTopAuxNew</span><span class="o">=</span><span class="n">y</span><span class="o">+</span><span class="mi">1</span><span class="o">&lt;</span><span class="no">M</span><span class="o">?</span><span class="n">y</span><span class="o">+</span><span class="mi">1</span><span class="o">:</span><span class="n">yTopAuxOld</span><span class="o">;</span>
                        <span class="o">}</span>
                        <span class="k">if</span> <span class="o">(</span><span class="n">max_so_far</span><span class="o">&lt;</span><span class="n">max_ending_here</span><span class="o">){</span>
                            <span class="n">xTopAux</span><span class="o">=</span><span class="n">startx</span><span class="o">;</span>
                            <span class="n">xBottomAux</span><span class="o">=</span><span class="n">x</span><span class="o">;</span>
                            <span class="n">yBottomAux</span><span class="o">=</span><span class="n">y</span><span class="o">;</span>
                            <span class="n">yTopAux</span><span class="o">=</span><span class="n">yTopAuxOld</span><span class="o">;</span>
                            <span class="n">yTopAuxOld</span><span class="o">=</span><span class="n">yTopAuxNew</span><span class="o">;</span>
                        <span class="o">}</span>
                        
                        <span class="n">max_so_far</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">max_so_far</span><span class="o">,</span> <span class="n">max_ending_here</span><span class="o">);</span>
                    <span class="o">}</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">max_so_far</span><span class="o">&gt;</span><span class="n">maximum</span><span class="o">){</span>
                        <span class="n">xTop</span><span class="o">=</span><span class="n">xTopAux</span><span class="o">;</span>
                        <span class="n">xBottom</span><span class="o">=</span><span class="n">xBottomAux</span><span class="o">;</span>
                        <span class="n">yTop</span><span class="o">=</span><span class="n">yTopAux</span><span class="o">;</span>
                        <span class="n">yBottom</span><span class="o">=</span><span class="n">yBottomAux</span><span class="o">;</span>
                        
                    <span class="o">}</span>    
                    <span class="n">maximum</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">maximum</span><span class="o">,</span> <span class="n">max_so_far</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="n">propertyChangeSupport</span><span class="o">.</span><span class="na">firePropertyChange</span><span class="o">(</span><span class="s">"resultSum"</span><span class="o">,</span> <span class="s">"zz"</span><span class="o">,</span> <span class="n">maximum</span> <span class="o">+</span><span class="s">" ("</span><span class="o">+</span><span class="n">xTop</span><span class="o">+</span><span class="s">","</span><span class="o">+</span><span class="n">yTop</span><span class="o">+</span><span class="s">") ("</span><span class="o">+</span><span class="n">xBottom</span><span class="o">+</span><span class="s">","</span><span class="o">+</span><span class="n">yBottom</span><span class="o">+</span><span class="s">")"</span><span class="o">);</span>     
        <span class="n">paintResult</span><span class="o">(</span><span class="n">xTop</span><span class="o">,</span><span class="n">yTop</span><span class="o">,</span><span class="n">xBottom</span><span class="o">,</span><span class="n">yBottom</span><span class="o">);</span>
    <span class="o">}</span>
              
</code></pre></div></div>

<p>Also, we are adding the result in the resultSum variable.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nt">&lt;amx:tableLayout</span> <span class="na">id=</span><span class="s">"tl2"</span> <span class="na">width=</span><span class="s">"100%"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;amx:rowLayout</span> <span class="na">id=</span><span class="s">"rl11"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;amx:cellFormat</span> <span class="na">id=</span><span class="s">"cf11"</span> <span class="na">halign=</span><span class="s">"center"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;amx:commandButton</span> <span class="na">actionListener=</span><span class="s">"#{bindings.runAlgorithm.execute}"</span> <span class="na">text=</span><span class="s">"run Algorithm"</span>
                             <span class="na">disabled=</span><span class="s">"#{!bindings.runAlgorithm.enabled}"</span> <span class="na">id=</span><span class="s">"cb1"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/amx:cellFormat&gt;</span>
      <span class="nt">&lt;/amx:rowLayout&gt;</span>
    <span class="nt">&lt;/amx:tableLayout&gt;</span>
    <span class="nt">&lt;amx:outputText</span> <span class="na">value=</span><span class="s">"#{bindings.resultSum.inputValue}"</span> <span class="na">id=</span><span class="s">"ot12"</span><span class="nt">/&gt;</span>
              
</code></pre></div></div>

<h3 id="refresh-components">Refresh components</h3>

<p>To refresh amx components we can use ProviderChangeSupport and PropertyChangeSupport.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- PropertyChangeSupport for attributes like String, Boolean, Integer, etc.
- ProviderChangeSupport for collections like arrays, collections, etc.
</code></pre></div></div>

<p>First we should add the following lines to the TableSum Class:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">protected</span> <span class="kd">transient</span> <span class="nc">ProviderChangeSupport</span> <span class="n">providerChangeSupport</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ProviderChangeSupport</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="kd">private</span> <span class="kd">transient</span> <span class="nc">PropertyChangeSupport</span> <span class="n">propertyChangeSupport</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PropertyChangeSupport</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
	
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addProviderChangeListener</span><span class="o">(</span><span class="nc">ProviderChangeListener</span> <span class="n">l</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">providerChangeSupport</span><span class="o">.</span><span class="na">addProviderChangeListener</span><span class="o">(</span><span class="n">l</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">removeProviderChangeListener</span><span class="o">(</span><span class="nc">ProviderChangeListener</span> <span class="n">l</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">providerChangeSupport</span><span class="o">.</span><span class="na">removeProviderChangeListener</span><span class="o">(</span><span class="n">l</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addPropertyChangeListener</span><span class="o">(</span><span class="nc">PropertyChangeListener</span> <span class="n">l</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">propertyChangeSupport</span><span class="o">.</span><span class="na">addPropertyChangeListener</span><span class="o">(</span><span class="n">l</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">removePropertyChangeListener</span><span class="o">(</span><span class="nc">PropertyChangeListener</span> <span class="n">l</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">propertyChangeSupport</span><span class="o">.</span><span class="na">removePropertyChangeListener</span><span class="o">(</span><span class="n">l</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>Then for every refreshing we can use the following methods.</p>

<p>For every table rows:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">providerChangeSupport</span><span class="o">.</span><span class="na">fireProviderRefresh</span><span class="o">(</span><span class="s">"tableRow1"</span><span class="o">);</span>
</code></pre></div></div>

<p>For result message:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">propertyChangeSupport</span><span class="o">.</span><span class="na">firePropertyChange</span><span class="o">(</span><span class="s">"resultSum"</span><span class="o">,</span> <span class="s">"oldValue"</span><span class="o">,</span> <span class="n">maximum</span> <span class="o">+</span><span class="s">" ("</span><span class="o">+</span><span class="n">xTop</span><span class="o">+</span><span class="s">","</span><span class="o">+</span><span class="n">yTop</span><span class="o">+</span><span class="s">") ("</span><span class="o">+</span><span class="n">xBottom</span><span class="o">+</span><span class="s">","</span><span class="o">+</span><span class="n">yBottom</span><span class="o">+</span><span class="s">")"</span><span class="o">);</span>     
</code></pre></div></div>

<h3 id="testing">Testing</h3>

<p>Finally, we test the sample application</p>

<p>Before run algorithm:</p>

<ul>
  <li><img src="/images/2015-10-19-update-dynamically-amx-tablelayout/TestBefore.jpg" alt="" /></li>
</ul>

<p>After run algorithm: <br />
Basically, the algorithm let us to get the max sum of a 2D array in a complexity O(n^3). <br />
This time the result was 108 and the rectangle goes from Top-Left (1,1) to Bottom-right (9,3) colored with blue.</p>

<ul>
  <li><img src="/images/2015-10-19-update-dynamically-amx-tablelayout/TestAfter.jpg" alt="" /></li>
</ul>

<p>You can download the project <a href="/files/applications/RefreshingMAF.zip"><strong><em>Here</em></strong></a></p>

:ET