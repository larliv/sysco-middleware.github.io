I"6\<h1 id="introduction">Introduction</h1>
<p>The purpose for this post is to enable you to setup your own email server. For this purpose, we chose Postfix as a mail server. Postfix is a free and open-source mail transfer agent that routes and delivers electronic mail.</p>

<p>In this Post, we will explain how to install and configure Postfix mail server on Ubuntu 18.4 server.</p>

<h1 id="prerequisites">Prerequisites:</h1>
<p>For installing Postfix server, your user should have sudo privileges (admin rights for installing postfix). If you want to receive emails from internet you should have DNS Records for Your Mail Server. You need to make sure Port 25 is open so that Postfix can receive emails from other SMTP servers.</p>

<h1 id="overview-of-steps">Overview of steps</h1>
<ul>
  <li><strong>Goal 1</strong>: Setting up mail server for receiving mails from local network.</li>
  <li><strong>Goal 2</strong>: Setting up mail server for receiving mails from internet.</li>
</ul>

<h1 id="goal-1-setting-up-mail-server-for-receiving-mails-from-local-network">Goal 1: Setting up mail server for receiving mails from local network</h1>
<h2 id="background-selection-of-cypress-as-the-test-framework">Background: Selection of Cypress as the test framework</h2>

<p>Before start configuring Postfix server, you need to make sure that proper entries in /etc/hosts. As most of programs will not accept an email using just @localhost as domain.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> 	vi /etc/hosts
</code></pre></div></div>
<p>Your host file will look something like this.</p>

<p><img src="/images/2020-03-24-Setting-up-email-sever-using-Postfix/hosts.png" alt="message" /></p>

<h2 id="installing-and-configuring-postfix-server-on-ubuntu-with-command-line-interface">Installing and Configuring Postfix server on ubuntu with Command line interface</h2>

<p>Installing Postfix on Ubutu server is quite simple task, but after installing postfix you need make sure that you configure postfix server properly.</p>

<p>Install the postfix package if it is not installed already.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> 	<span class="nb">sudo </span>apt-get <span class="nb">install </span>postfix
</code></pre></div></div>
<p><strong>Configure a Catch-all Address</strong></p>

<p>Enabling this, you can use any email address ending with “@localhost” or “@localhost.com”.</p>

<p>if not exists, create file /etc/postfix/virtual:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nb">sudo </span>nano /etc/postfix/virtual
</code></pre></div></div>
<p>Add the following 2 lines content, replacing <your-user> with your Unix user account:</your-user></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    @localhost &lt;your-user&gt;
    @localhost.com &lt;your-user&gt; 
</code></pre></div></div>
<p>Save and close the file.</p>

<p><strong>Configure a Catch-all Address</strong></p>

<p>To Change the configuration of postfixx server we need to read this file:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nb">sudo </span>vi /etc/postfix/main.cf
</code></pre></div></div>
<p>And check if this line is enabled in main.cf, or add it if not exists:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    virtual_alias_maps <span class="o">=</span> <span class="nb">hash</span>:/etc/postfix/virtual
</code></pre></div></div>
<p>Save and close this file and to activate these changes by running below commands:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nb">sudo </span>postfix reload
    <span class="nb">sudo </span>service postfix restart
</code></pre></div></div>
<p><strong>Configure Postfix to use Maildir-style mailboxes and other settings.</strong>
Open Postfix configuration file</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nb">sudo </span>vi /etc/postfix/main.cf
</code></pre></div></div>
<p>Add below lines after inet_protocoles and save main.cf</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    luser_relay <span class="o">=</span> sysco@localhost
    local_recipient_maps <span class="o">=</span>
    home_mailbox <span class="o">=</span> Maildir/
    disable_mime_output_convesion <span class="o">=</span> <span class="nb">yes
    </span>strict_8bitmime <span class="o">=</span> <span class="nb">yes
    </span>strict_7bit_headers <span class="o">=</span> no
    strict_8bitmime_body <span class="o">=</span> <span class="nb">yes</span>
</code></pre></div></div>

<p>Reload postfix and restart it:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nb">sudo </span>postfix reload
    <span class="nb">sudo </span>service postfix restart
</code></pre></div></div>
<p>Your /etc/postfix/main.cf will look like this:</p>

<p><img src="/images/2020-03-24-Setting-up-email-sever-using-Postfix/maincf.png" alt="message" /></p>

<p><strong>Optional steps</strong>
Let Postfix know about the domains that it should consider local:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nb">sudo </span>postconf <span class="nt">-e</span> <span class="s2">"mydestination = gitlab.example.com, localhost.localdomain, localhost"</span>
</code></pre></div></div>
<p>Let Postfix know about the IPs that it should consider part of the LAN:
We’ll assume 192.168.1.0/24 is your local LAN. You can safely skip this step if you don’t have other machines in the same local network.</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    sudo postconf -e "mynetworks = 127.0.0.0/8, 192.168.1.0/24"
</code></pre></div></div>

<p>Remember to relaod Postfix configuration and restart it.</p>

<p>Checking Postfix server status.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nb">sudo </span>service postfix status
</code></pre></div></div>
<p>Starting Postfix server.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nb">sudo </span>service postfix start
</code></pre></div></div>
<p>Stoping Postfix server.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nb">sudo </span>service postfix stop
</code></pre></div></div>

<p><strong>Testing Postfix sever</strong></p>

<p>For testing postfix server first, we will install mailutils for sending mail to local server</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>mailutils
</code></pre></div></div>
<p>Execute below command to send mail to local mail sever</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		mail <span class="nt">-s</span> <span class="s2">"Test Subject"</span> 27148485@localhost.com &lt; /dev/null
</code></pre></div></div>
<p>and check mail /Maildir/new , if you receive any file in this folder then your postfix server is configured properly and you mail server setup is complete for receiving emails from local network.</p>

<h1 id="goal-2-setting-up-mail-server-for-receiving-mails-from-internet">Goal 2: Setting up mail server for receiving mails from internet</h1>

<p>Postfix requires server’s hostname to identify itself when communicating with other MTAs. Host name can have Single word or Fully Qualified Domain Name(FQDN). FQDN is usually used for internet facing servers. You should setup DNS records for your mail server in your DNS hosting service. In this you have to setup MX record and A record.</p>

<p><strong>MX reco*rd</strong>: An MX record tells other MTAs that your mail server mail. syscotest.com is responsible for email delivery for your domain name.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    MX record    @           mail.syscotest.com
</code></pre></div></div>

<p><strong>A record</strong>: An A record maps a FQDN to an IP address.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    mail.syscotest.com        &lt;IP-address&gt;
</code></pre></div></div>

<p><strong>Installing Postfix</strong></p>

<p>Run below command in terminal to install Postfix server.
sudo apt-get update
		sudo apt-get install postfix -y</p>

<p>In this way we did not depend upon each other and could share different learnings.</p>

<p>We them demo’d this to each other, and were keen to continue with Cypress.</p>

<h2 id="commands-for-running-the-tests-on-the-command-line-in-the-node-application">Commands for running the tests on the command line in the node application</h2>

<p>Here are the commands for running the tests in UI and headless mode.</p>

<p>UI mode is how the tests will be run locally when building and testing new
features:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm run <span class="nb">test</span>:e2e
</code></pre></div></div>

<p>Headless mode is how the tests will be run on the pipeline:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm run <span class="nb">test</span>:e2ehl
</code></pre></div></div>

<p>Add the shortcuts “<b>test:e2e</b>” and “<b>test:e2ehl</b>” to package.json</p>

<p>Snip:</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
 </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"app-ui"</span><span class="p">,</span><span class="w">
 </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"0.1.0"</span><span class="p">,</span><span class="w">
 </span><span class="nl">"private"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
 </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
 </span><span class="nl">"serve"</span><span class="p">:</span><span class="w"> </span><span class="s2">"vue-cli-service serve"</span><span class="p">,</span><span class="w">
 </span><span class="nl">"build"</span><span class="p">:</span><span class="w"> </span><span class="s2">"vue-cli-service build"</span><span class="p">,</span><span class="w">
 </span><span class="nl">"test:unit"</span><span class="p">:</span><span class="w"> </span><span class="s2">"vue-cli-service test:unit"</span><span class="p">,</span><span class="w">
 </span><span class="nl">"test:e2e"</span><span class="p">:</span><span class="w"> </span><span class="s2">"vue-cli-service test:e2e"</span><span class="p">,</span><span class="w">
 </span><span class="nl">"test:e2ehl"</span><span class="p">:</span><span class="w"> </span><span class="s2">"vue-cli-service test:e2e --headless"</span><span class="p">,</span><span class="w">
 </span><span class="nl">"lint"</span><span class="p">:</span><span class="w"> </span><span class="s2">"vue-cli-service lint"</span><span class="w">
 </span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Test the shortcut commands locally.</p>

<p>Run tests in UI mode locally, with shortcut:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm run <span class="nb">test</span>:e2e
</code></pre></div></div>

<p>Run tests in headless mode locally, with shortcut:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm run <span class="nb">test</span>:e2ehl
</code></pre></div></div>

<h1 id="goal-2-run-cypress-tests-on-an-azure-devops-pipeline">Goal 2: Run Cypress tests on an Azure DevOps pipeline</h1>

<p>Pre-requisite: The Azure DevOps space was set up with the UI repository</p>

<p>In short, create and configure a pipeline to run the tests in headless mode</p>

<h2 id="create-pipeline">Create pipeline</h2>
<p>In Azure DevOps</p>
<ul>
  <li>*Create pipeline &gt; new pipeline &gt; select Azure &gt; select the repository &gt; select “Node.js with Vue” &gt; create branch and commit message with appropriate links to work item</li>
  <li>The pipeline will start running, take a peek and follow along with the steps to see what it does out of the box</li>
</ul>

<h2 id="configure-pipeline-to-run-the-tests-in-headless-mode">Configure pipeline to run the tests in headless mode</h2>

<p>Update azure-pipelines.yml to run the tests in headless mode:</p>

<p>Snip azure-pipelines.yml :</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Node.js with Vue</span>

<span class="c1"># Build a Node.js project that uses Vue.</span>

<span class="c1"># Add steps that analyze code, save build artifacts, deploy, and more:</span>

<span class="c1"># https://docs.microsoft.com/azure/devops/pipelines/languages/javascript</span>

<span class="na">trigger</span><span class="pi">:</span>
 <span class="pi">-</span> <span class="s">master</span>

<span class="na">pool</span><span class="pi">:</span>
 <span class="na">vmImage</span><span class="pi">:</span> <span class="s1">'</span><span class="s">ubuntu-latest'</span>

<span class="na">steps</span><span class="pi">:</span>
 <span class="pi">-</span> <span class="na">task</span><span class="pi">:</span> <span class="s">NodeTool@0</span>
   <span class="na">inputs</span><span class="pi">:</span>
     <span class="na">versionSpec</span><span class="pi">:</span> <span class="s1">'</span><span class="s">10.x'</span>
   <span class="na">displayName</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Install</span><span class="nv"> </span><span class="s">Node.js'</span>

 <span class="pi">-</span> <span class="na">script</span><span class="pi">:</span> <span class="pi">|</span>
    <span class="s">npm install</span>
    <span class="s">npm run test:e2ehl</span>
    <span class="s">npm run build</span>
   <span class="na">displayName</span><span class="pi">:</span> <span class="s1">'</span><span class="s">npm</span><span class="nv"> </span><span class="s">install,</span><span class="nv"> </span><span class="s">test</span><span class="nv"> </span><span class="s">and</span><span class="nv"> </span><span class="s">build'</span>
</code></pre></div></div>
<p>After pushing the update to the repository, verify the logs to be sure the test ran.</p>

<p>Snip:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>My First Test
✓ Visits the app root url (982ms)
</code></pre></div></div>

<h1 id="goal-3-send-test-results-to-a-cypress-dashboard">Goal 3: Send test results to a Cypress Dashboard</h1>
<p>Cypress has a Dashboard feature which shows test run results in a simple and elegant way.</p>

<h2 id="pre-requisites">Pre-requisites</h2>
<ul>
  <li>A Cypress dashboard was created and tested locally</li>
  <li>It was then shared with some team members for testing</li>
  <li>Note that Cypress Dashboard is a paid feature depending on usage</li>
</ul>

<h2 id="update-packagejson-with-the-new-command-to-send-test-results-to-the-dashboard">Update package.json with the new command to send test results to the dashboard</h2>
<p>Snip:</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="err">..…</span><span class="w">
 </span><span class="nl">"build"</span><span class="p">:</span><span class="w"> </span><span class="s2">"vue-cli-service build"</span><span class="p">,</span><span class="w">
 </span><span class="nl">"test:unit"</span><span class="p">:</span><span class="w"> </span><span class="s2">"vue-cli-service test:unit"</span><span class="p">,</span><span class="w">
 </span><span class="nl">"test:e2e"</span><span class="p">:</span><span class="w"> </span><span class="s2">"vue-cli-service test:e2e"</span><span class="p">,</span><span class="w">
 </span><span class="nl">"test:e2ehl"</span><span class="p">:</span><span class="w"> </span><span class="s2">"vue-cli-service test:e2e --headless"</span><span class="p">,</span><span class="w">
 </span><span class="nl">"test:e2e-pipeline"</span><span class="p">:</span><span class="w"> </span><span class="s2">"vue-cli-service test:e2e --headless --record --key the-key-goes-in-here"</span><span class="p">,</span><span class="w">
 </span><span class="nl">"lint"</span><span class="p">:</span><span class="w"> </span><span class="s2">"vue-cli-service lint"</span><span class="w">
 </span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h2 id="update-azure-pipelinesyml-to-run-this-command-instead">Update azure-pipelines.yml to run this command instead</h2>
<p>Snip:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- script: |
     npm install
     npm run test:e2e-pipeline
     npm run build
</code></pre></div></div>

<p>Now when the pipeline is run it is possible to click through to the Dashboard.
For example, clicking on a result shows links to test test output, a video of the test run in the case of failure, and so on.</p>

<h1 id="goal-4-configure-pipeline-to-fail-if-tests-fail">Goal 4: Configure pipeline to fail if tests fail</h1>

<p>Currently the azure-pipeline.yml has install, test and build in one step which is a quick proof of concept of tests running, however this results in the pipeline showing success even if Cypress tests fail.</p>

<p>Therefore splitting up the steps is needed as follows.</p>

<p>Snip of azure-pipeline.yml:</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="pi">-</span> <span class="na">task</span><span class="pi">:</span> <span class="s">Npm@1</span>
   <span class="na">inputs</span><span class="pi">:</span>
     <span class="na">command</span><span class="pi">:</span> <span class="s1">'</span><span class="s">install'</span>
 <span class="pi">-</span> <span class="na">task</span><span class="pi">:</span> <span class="s">Npm@1</span>
   <span class="na">inputs</span><span class="pi">:</span>
     <span class="na">command</span><span class="pi">:</span> <span class="s1">'</span><span class="s">custom'</span>
     <span class="na">customCommand</span><span class="pi">:</span> <span class="s1">'</span><span class="s">run</span><span class="nv"> </span><span class="s">test:e2e-pipeline'</span>
   <span class="na">displayName</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Test'</span>
 <span class="pi">-</span> <span class="na">task</span><span class="pi">:</span> <span class="s">Npm@1</span>
   <span class="na">inputs</span><span class="pi">:</span>
     <span class="na">command</span><span class="pi">:</span> <span class="s1">'</span><span class="s">custom'</span>
     <span class="na">customCommand</span><span class="pi">:</span> <span class="s1">'</span><span class="s">run</span><span class="nv"> </span><span class="s">build'</span>
   <span class="na">displayName</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Build'</span>
</code></pre></div></div>

<p>Trigger the pipeline where there is one known failing test. If one does not exist, write one for the purpose of testing the pipeline.
The pipeline now shows this error message:
<img src="/images/2020-02-25-Setting-up-Cypress-tests-for-a-Node.js-app-on-Azure-DevOps/Devops-npm-failed.png" alt="Error message" /></p>

<p>The full azure-pipeline.yml is now</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Node.js with Vue</span>
<span class="c1"># Build a Node.js project that uses Vue.</span>
<span class="c1"># Add steps that analyze code, save build artifacts, deploy, and more:</span>
<span class="c1"># https://docs.microsoft.com/azure/devops/pipelines/languages/javascript</span>
<span class="na">trigger</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">dev</span>
    <span class="pi">-</span> <span class="s">master</span>
    
<span class="na">pool</span><span class="pi">:</span>
  <span class="na">vmImage</span><span class="pi">:</span> <span class="s1">'</span><span class="s">ubuntu-latest'</span>
  
<span class="na">steps</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">task</span><span class="pi">:</span> <span class="s">NodeTool@0</span>
    <span class="na">inputs</span><span class="pi">:</span>
      <span class="na">versionSpec</span><span class="pi">:</span> <span class="s1">'</span><span class="s">10.x'</span>
    <span class="na">displayName</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Install</span><span class="nv"> </span><span class="s">Node.js'</span>
  
  <span class="pi">-</span> <span class="na">task</span><span class="pi">:</span> <span class="s">Npm@1</span>
    <span class="na">inputs</span><span class="pi">:</span>
      <span class="na">command</span><span class="pi">:</span> <span class="s1">'</span><span class="s">install'</span>
  <span class="pi">-</span> <span class="na">task</span><span class="pi">:</span> <span class="s">Npm@1</span>
    <span class="na">inputs</span><span class="pi">:</span>
      <span class="na">command</span><span class="pi">:</span> <span class="s1">'</span><span class="s">custom'</span>
      <span class="na">customCommand</span><span class="pi">:</span> <span class="s1">'</span><span class="s">run</span><span class="nv"> </span><span class="s">test:e2e-pipeline'</span>
    <span class="na">displayName</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Test'</span>
  <span class="pi">-</span> <span class="na">task</span><span class="pi">:</span> <span class="s">Npm@1</span>
    <span class="na">inputs</span><span class="pi">:</span>
      <span class="na">command</span><span class="pi">:</span> <span class="s1">'</span><span class="s">custom'</span>
      <span class="na">customCommand</span><span class="pi">:</span> <span class="s1">'</span><span class="s">run</span><span class="nv"> </span><span class="s">build'</span>
    <span class="na">displayName</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Build'</span>
</code></pre></div></div>

<p>A keen reader will note that the tests are also now triggered on both dev and master branches, instead of just master as in the initial steps, because the pipeline evolves along with the project.</p>

<h1 id="conclusion">Conclusion</h1>

<p>So far Cypress, Node.js with Vue and the Azure DevOps pipeline are working well together.</p>

<p>In addition, the tools are a good match for the project.</p>

<p>Finally, the main success factor has been a great team working together to share knowledge and experience.</p>

<p>That’s it - credit goes to the team for this setup!</p>
:ET