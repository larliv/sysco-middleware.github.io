I"<h1 id="dead-lock-detection-using-jvmd">Dead lock detection using JVMD</h1>
<p>The aim of this manual is to show how useful is the Java Virtual Machine Diagnostics to find the root cause of a thread deadlock in Java.</p>

<p>First of all, it is necessary to create a generator of deadlocks. In this case Iâ€™ve made a little web application whose goal is to generate thread deadlocks. The code of this application was downloaded from [1]. The program is very simple as you can see:</p>

<p>Dead lock generator called WebDeadLockV2.0</p>

<p><img src="/images/2016-05-29-DeadLockDetection/01.png" alt="" /></p>

<p>The thread deadlocks generators is deployed on a Weblogic server. In this case, I am using the Oracle Management Server (OMS) in order to save resources. However, it could be deployed in any other server under the supervision of Oracle Cloud Control.</p>

<p><img src="/images/2016-05-29-DeadLockDetection/02.png" alt="" /></p>

<p>After deploying the application I sent several requests using this URL:</p>

<p>https://testmachine.sysco.no:7301/WebDeadLockV2.0/deadlock</p>

<p>In order to get an overview of the locks you have to follow these steps:</p>

<ol>
  <li>
    <p>On the left panel you have to select the Java Virtual Machine Pool related to OMS</p>

    <p><img src="/images/2016-05-29-DeadLockDetection/03.png" alt="" /></p>
  </li>
  <li>
    <p>As a result you will see the details about this pool on the right side. The quantity of locks is remarked in red. In this case we can 221 locks.</p>

    <p><img src="/images/2016-05-29-DeadLockDetection/04.png" alt="" /></p>

    <p>In addition, this problem also is detected by the Admin Console</p>

    <p><img src="/images/2016-05-29-DeadLockDetection/05.png" alt="" /></p>
  </li>
</ol>

<h1 id="what-about-complex-scenarios">What about complex scenarios?</h1>

<p>Even though we can detect this problem using the Admin Console and the log files, the recognition of the root cause is a long way that requires matching logs and even thread dumps. This can be done easily using JVMD following these steps based on [2].</p>

<ol>
  <li>
    <p>You have to click JVM Performance Diagnostics</p>

    <p><img src="/images/2016-05-29-DeadLockDetection/06.png" alt="" /></p>
  </li>
  <li>
    <p>Expand Filter Options</p>

    <p><img src="/images/2016-05-29-DeadLockDetection/07.png" alt="" /></p>
  </li>
  <li>
    <p>Click on Search for locks</p>

    <p><img src="/images/2016-05-29-DeadLockDetection/08.png" alt="" /></p>
  </li>
  <li>
    <p>We will get a screen and then we have to order by column Wait Count.</p>

    <p><img src="/images/2016-05-29-DeadLockDetection/09.png" alt="" /></p>
  </li>
  <li>
    <p>After sorting the table I selected the first one as an example. The filter Criteria is set in Lock Held   and then click on OK</p>

    <p><img src="/images/2016-05-29-DeadLockDetection/10.png" alt="" /></p>

    <p><img src="/images/2016-05-29-DeadLockDetection/11.png" alt="" /></p>
  </li>
  <li>
    <p>After executing the filter, we can get useful information such as:</p>

    <p>Active threads per state
<img src="/images/2016-05-29-DeadLockDetection/12.png" alt="" /></p>

    <p>Top requests
<img src="/images/2016-05-29-DeadLockDetection/13.png" alt="" /></p>

    <p>Top methods
<img src="/images/2016-05-29-DeadLockDetection/14.png" alt="" /></p>
  </li>
  <li>
    <p>Now we can use the thread tab to get some details about threads involved in the problem</p>

    <p><img src="/images/2016-05-29-DeadLockDetection/15.png" alt="" /></p>
  </li>
  <li>
    <p>You have to click any of the previous blue bars to get useful information about the root cause</p>

    <p><img src="/images/2016-05-29-DeadLockDetection/16.png" alt="" /></p>

    <p>Current call: DeadLockServlet-&gt;lock21. 
Thus,  we have a method that causes the problem with some clicks</p>

    <p>Request: /WebDeadLockV2.0/deadlock</p>

    <p>Thread holding the lock: [STUCK] ExecuteThread: â€˜2â€™ for queue: â€˜weblogic.kernel.Default (self-tuning)â€™ (PID Operating System : 3376-56)</p>

    <p>Now you can get into: [STUCK] ExecuteThread: â€˜1â€™ for queue: â€˜weblogic.kernel.Default (self-tuning)â€™ (OS Pid : 24852-18)</p>

    <p><img src="/images/2016-05-29-DeadLockDetection/17.png" alt="" /></p>

    <p>In the previous screen we can identify:</p>

    <p>The object for which the program is waiting for: java.lang.Object@1780666517</p>

    <p>The depth: In this case is 0</p>

    <p>With the depth we can review the below part of the above screen (stuck thread) to get more details about the class that generates the problem</p>
  </li>
</ol>

<p>In conclusion, thanks to JVMD we can identify the problem is caused by the method lock21 that is located in the file DeadLockServlet.java in the line 54 of the source code.</p>

<h1 id="references-list">References list:</h1>

<p>[1] Ways to create a deadlock in servlet [Online document] Available from: http://stackoverflow.com/questions/11583644/ways-to-create-a-deadlock-in-servlet (Accessed: 26 June 16, 2015)</p>

<p>[2] https://www.youtube.com/watch?v=FNaodGLcjOM&amp;feature=youtu.be</p>
:ET