I"˙<p>In this post, we will learn how to use customized queries for Distributed polling in OSB 12C, there we go:</p>

<h3 id="solution">SOLUTION</h3>

<p>First, we need to know how to create a Db poller in OSB 12C using JDeveloper. Actually, I made a previous post about how to acomplish this step in the following link:
<a href="http://blog.sysco.no/osb/create-custom-sql-statements-pollers-OSB-12c/">create custom sql statements in polling DbAdapters with OSB 12c</a></p>

<p>So basically, after we created a Database poller with the option of physical delete (first option) then we will modify the xxx-mappings.xml file with a text editor because this file is protected in Jdeveloper.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;querying&gt;</span>
            <span class="nt">&lt;queries&gt;</span>
               <span class="nt">&lt;query</span> <span class="na">name=</span><span class="s">"customerPollerSelect"</span> <span class="na">xsi:type=</span><span class="s">"read-all-query"</span><span class="nt">&gt;</span>
                 <span class="c">&lt;!--QUERY FOR POLLING--&gt;</span>
                  <span class="nt">&lt;call</span> <span class="na">xsi:type=</span><span class="s">"sql-call"</span><span class="nt">&gt;</span>
                        <span class="nt">&lt;sql&gt;</span>SELECT * FROM CLIENTS WHERE POLLER_READ=0 AND TIMESTAMP <span class="ni">&amp;lt;</span>= SYSDATE FOR UPDATE SKIP LOCKED<span class="nt">&lt;/sql&gt;</span>
                  <span class="nt">&lt;/call&gt;</span>
                  <span class="nt">&lt;reference-class&gt;</span>customerPoller.Clients<span class="nt">&lt;/reference-class&gt;</span>
                  <span class="nt">&lt;lock-mode&gt;</span>lock-no-wait<span class="nt">&lt;/lock-mode&gt;</span>
                  <span class="nt">&lt;container</span> <span class="na">xsi:type=</span><span class="s">"list-container-policy"</span><span class="nt">&gt;</span>
                     <span class="nt">&lt;collection-type&gt;</span>java.util.Vector<span class="nt">&lt;/collection-type&gt;</span>
                  <span class="nt">&lt;/container&gt;</span>
               <span class="nt">&lt;/query&gt;</span>
            <span class="nt">&lt;/queries&gt;</span>
            <span class="nt">&lt;delete-query</span> <span class="na">xsi:type=</span><span class="s">"delete-object-query"</span><span class="nt">&gt;</span>
		<span class="nt">&lt;call</span> <span class="na">xsi:type=</span><span class="s">"sql-call"</span><span class="nt">&gt;</span>
      <span class="c">&lt;!--QUERY FOR UPDATING AFTER POLLING--&gt;</span>
			<span class="nt">&lt;sql&gt;</span>UPDATE CLIENTS SET POLLER_READ=1 WHERE ID=#ID<span class="nt">&lt;/sql&gt;</span>
		<span class="nt">&lt;/call&gt;</span>
	<span class="nt">&lt;/delete-query&gt;</span>
  <span class="nt">&lt;/querying&gt;</span>
</code></pre></div></div>

<p>In this piece of code, I‚Äôm specifying the query for polling and query for updating after polling. Here there is one important thing when we are handling distributed polling, I added ‚ÄúFOR UPDATE SKIP LOCKED‚Äù. This means that one managed server will process a database row and it won‚Äôt be processed by another manager server that is polling the same table.</p>
:ET