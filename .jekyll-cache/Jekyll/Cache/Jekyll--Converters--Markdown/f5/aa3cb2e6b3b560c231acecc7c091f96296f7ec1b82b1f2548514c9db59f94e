I"‚L<h1 id="introduction">Introduction</h1>

<p>Although <a href="https://www.soapui.org/">SoapUI</a> has a <a href="https://www.soapui.org/docs/functional-testing/working-with-teststeps.html">Test Step</a> called ‚Äú<a href="https://www.soapui.org/jdbc/reference/the-jdbc-request-window.html">JDBC Request</a>‚Äù this test step requires hard coded credentials to run properly. Otherwise we are going to get ‚Äújava.sqlSQLException‚Äù because of missing credentials. However very often we don‚Äôt want to supply hard coded credentials. Especially if the tests are running on test automation server (e.g. from <a href="https://jenkins.io/">Jenkins</a>). Sometimes we want to apply <a href="https://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html">Java cryptography</a> facilities for added security. This can only be applied from within <a href="https://support.smartbear.com/readyapi/docs/soapui/steps/groovy.html">Groovy Test Step</a> by using <a href="http://groovy-lang.org/">Groovy</a> code and appropriate <a href="https://www.java.com/">Java</a> classes.</p>

<p>In this article we are going to demonstrate how to use <a href="https://support.smartbear.com/readyapi/docs/soapui/steps/groovy.html">Groovy Test Step</a> within <a href="https://www.soapui.org/">SoapUI</a> to load database credentials from disk, and than initialize database connection by using <a href="http://groovy-lang.org/">Groovy</a>. At the and we will see practical example on using this database connection.</p>

<h1 id="setting-up-and-initializing-database-connection">Setting Up and Initializing Database Connection</h1>

<p>To set up database connection from within <a href="https://support.smartbear.com/readyapi/docs/soapui/steps/groovy.html">Groovy Test Step</a> we are going to do following steps:</p>

<ol>
  <li>Create Initialization <a href="https://www.soapui.org/docs/functional-testing/structuring-and-running-tests.html#1-Test-Structure">Test Case</a> with disabled <a href="https://support.smartbear.com/readyapi/docs/soapui/steps/groovy.html">Groovy Test Step</a>,</li>
  <li>Load credentials from disk,</li>
  <li>Set up and load database driver,</li>
  <li>Save database connection as a property.</li>
</ol>

<h2 id="create-initialization-test-case-with-disabled-groovy-test-step">Create Initialization Test Case with disabled Groovy Test Step</h2>

<p>First we have to prepare our test environment. Since many <a href="https://www.soapui.org/docs/functional-testing/structuring-and-running-tests.html#1-Test-Structure">Test Cases</a> within our project will share the same database connection it is best to store database initialization <a href="https://www.soapui.org/docs/functional-testing/working-with-teststeps.html">Test Step</a> in a separate <a href="https://www.soapui.org/docs/functional-testing/structuring-and-running-tests.html#1-Test-Structure">Test Case</a>. This <a href="https://www.soapui.org/docs/functional-testing/structuring-and-running-tests.html#1-Test-Structure">Test Case</a> can be used to store initialization code for shared libraries as well.</p>

<p>Example of such structure is visible on the following picture:</p>

<p><img src="/images/2018-11-27-db-connection-in-soapui/Project_structure.png" alt="Structure of the project that is using shared library and database initialization" /> Fig. 1. Structure of the <a href="https://www.soapui.org/">SoapUI</a> project that is using shared library and database initialization <a href="https://support.smartbear.com/readyapi/docs/soapui/steps/groovy.html">Groovy Test Step</a></p>

<h2 id="load-credentials-from-disk">Load credentials from disk</h2>

<p>We don‚Äôt want hardcoded credentials in our code or in <a href="https://www.soapui.org/jdbc/reference/the-jdbc-request-window.html">JDBC Request</a> test step. That‚Äôs why we are going to load them from disk. Code example to do so can be seen below:</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Credentials</span> <span class="o">{</span>
    <span class="n">String</span> <span class="n">userName</span>
    <span class="n">String</span> <span class="n">password</span>
<span class="o">}</span>


<span class="c1">//When running in SoapUI</span>
<span class="n">String</span> <span class="n">fileName</span> <span class="o">=</span> <span class="s2">"/Users/&lt;username&gt;/Documents/elemif/src/test/resources/database.json"</span>

<span class="c1">//When running on Jenkins (DISABLE when needed)</span>
<span class="n">fileName</span> <span class="o">=</span> <span class="s2">"src/test/resources/database.json"</span>


<span class="kt">def</span> <span class="n">inputFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">fileName</span><span class="o">)</span>
<span class="n">Credentials</span> <span class="n">credentials</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JsonSlurper</span><span class="o">().</span><span class="na">parseText</span><span class="o">(</span><span class="n">inputFile</span><span class="o">.</span><span class="na">text</span><span class="o">)</span>
</code></pre></div></div>

<p>When we are running our tests from within <a href="https://www.soapui.org/">SoapUI</a> GUI environment we have to supply absolute paths but when we are running our tests from command line or from e.g. <a href="https://jenkins.io/">Jenkins</a> server than we have to use relative paths.</p>

<h2 id="setting-up-and-loading-database-driver">Setting up and loading database driver</h2>

<p>In order to load database driver from <a href="https://support.smartbear.com/readyapi/docs/soapui/steps/groovy.html">Groovy Test Step</a> we first have to place database driver in a correct location. When running this test step from <a href="https://www.soapui.org/">SoapUI</a> GUI than we have to find installation folder of <a href="https://www.soapui.org/">SoapUI</a> (On my mac this is: <code class="highlighter-rouge">/Applications/Development/SoapUI-5.4.0.app)</code> and put the driver in: <code class="highlighter-rouge">Contents/java/app/bin/ext</code>. On Windows or Linux machine the path can be a little bit different but it will still be <code class="highlighter-rouge">bin/ext</code> folder.</p>

<p>Example with updated Oracle JDBC (ojdbc8.jar) dirver location can be seen on the following picture:</p>

<p><img src="/images/2018-11-27-db-connection-in-soapui/Driver-location.png" alt="Driver location" /> Fig. 2. Driver location</p>

<p>When we have driver that we want to use in place we are now able to load and initialize driver from <a href="http://groovy-lang.org/">Groovy</a> code with this script:</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">com</span><span class="o">.</span><span class="na">eviware</span><span class="o">.</span><span class="na">soapui</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">GroovyUtils</span><span class="o">.</span><span class="na">registerJdbcDriver</span><span class="o">(</span><span class="s2">"oracle.jdbc.driver.OracleDriver"</span><span class="o">)</span>
<span class="n">Sql</span> <span class="n">sql</span> <span class="o">=</span> <span class="n">Sql</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span>
    <span class="s1">'jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=xxx.xxx.xxx.xx)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=&lt;service_name&gt;)))'</span><span class="o">,</span>
    <span class="n">credentials</span><span class="o">.</span><span class="na">userName</span><span class="o">,</span> <span class="n">credentials</span><span class="o">.</span><span class="na">password</span><span class="o">,</span> <span class="s1">'oracle.jdbc.driver.OracleDriver'</span><span class="o">)</span>
</code></pre></div></div>

<p>Finally in order to share the object we are going to register it as a property of <strong>context</strong> object, as can be seen from the whole script seen here:</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">groovy.sql.Sql</span>
<span class="kn">import</span> <span class="nn">groovy.json.JsonSlurper</span>

<span class="cm">/* DATABASE INTIALIZATION BLOCK */</span>
<span class="kd">class</span> <span class="nc">Credentials</span> <span class="o">{</span>
    <span class="n">String</span> <span class="n">userName</span>
    <span class="n">String</span> <span class="n">password</span>
<span class="o">}</span>


<span class="c1">//When running in SoapUI</span>
<span class="n">String</span> <span class="n">fileName</span> <span class="o">=</span> <span class="s2">"/Users/&lt;username&gt;/Documents/elemif/src/test/resources/database.json"</span>

<span class="c1">//When running on Jenkins (DISABLE when needed)</span>
<span class="n">fileName</span> <span class="o">=</span> <span class="s2">"src/test/resources/database.json"</span>


<span class="kt">def</span> <span class="n">inputFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">fileName</span><span class="o">)</span>
<span class="n">Credentials</span> <span class="n">credentials</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JsonSlurper</span><span class="o">().</span><span class="na">parseText</span><span class="o">(</span><span class="n">inputFile</span><span class="o">.</span><span class="na">text</span><span class="o">)</span>
<span class="c1">//log.info "DEBUG: credentials=${credentials.userName}"</span>

<span class="n">com</span><span class="o">.</span><span class="na">eviware</span><span class="o">.</span><span class="na">soapui</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">GroovyUtils</span><span class="o">.</span><span class="na">registerJdbcDriver</span><span class="o">(</span><span class="s2">"oracle.jdbc.driver.OracleDriver"</span><span class="o">)</span>
<span class="n">Sql</span> <span class="n">sql</span> <span class="o">=</span> <span class="n">Sql</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span>
    <span class="s1">'jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=xx.xx.xx.xx)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=custom_qa)))'</span><span class="o">,</span>
    <span class="n">credentials</span><span class="o">.</span><span class="na">userName</span><span class="o">,</span> <span class="n">credentials</span><span class="o">.</span><span class="na">password</span><span class="o">,</span> <span class="s1">'oracle.jdbc.driver.OracleDriver'</span><span class="o">)</span>

<span class="n">context</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s2">"sql"</span><span class="o">,</span> <span class="n">sql</span><span class="o">)</span>
</code></pre></div></div>

<h1 id="using-database-connection">Using database connection</h1>

<p>To actually use database connection we have first to execute disabled <a href="https://support.smartbear.com/readyapi/docs/soapui/steps/groovy.html">Groovy Test Step</a> that contains previously described initialization code, and than we can pass captured reference to database connection <strong>sql</strong> object to another function that is going to use it. Here is en example how to do it from <a href="https://support.smartbear.com/readyapi/docs/soapui/steps/groovy.html">Groovy Test Step</a>:</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">com.eviware.soapui.impl.wsdl.teststeps.WsdlTestRequestStepResult</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">groovy.sql.Sql</span>
<span class="kn">import</span> <span class="nn">java.time.LocalDateTime</span>
<span class="kn">import</span> <span class="nn">java.util.Date</span>

<span class="cm">/**
 * Class to runn test steps (has to be class to runn in passed context)
 */</span>
<span class="kd">class</span> <span class="nc">TestSteps</span> <span class="o">{</span>


  <span class="c1">//Global objects</span>
  <span class="kt">def</span> <span class="n">log</span>
  <span class="kt">def</span> <span class="n">context</span>
  <span class="kt">def</span> <span class="n">sql</span>

  <span class="kt">def</span> <span class="nf">TestSteps</span><span class="o">(</span><span class="n">log</span><span class="o">,</span> <span class="n">context</span><span class="o">,</span> <span class="n">testRunner</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">log</span> <span class="o">=</span> <span class="n">log</span>
      <span class="k">this</span><span class="o">.</span><span class="na">context</span> <span class="o">=</span> <span class="n">context</span>
      <span class="k">this</span><span class="o">.</span><span class="na">testRunner</span> <span class="o">=</span> <span class="n">testRunner</span>

    <span class="n">testRunner</span><span class="o">.</span><span class="na">testCase</span><span class="o">.</span><span class="na">testSuite</span><span class="o">.</span><span class="na">getTestCaseByName</span><span class="o">(</span><span class="s2">"Initialization"</span><span class="o">).</span><span class="na">getTestStepByName</span><span class="o">(</span><span class="s2">"InitDB"</span><span class="o">).</span><span class="na">run</span><span class="o">(</span><span class="n">testRunner</span><span class="o">,</span> <span class="n">context</span><span class="o">)</span>
    <span class="k">this</span><span class="o">.</span><span class="na">sql</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s2">"sql"</span><span class="o">)</span>
  <span class="o">}</span>

  <span class="cm">/**
   * Test steps execution function
   */</span>
  <span class="kt">def</span> <span class="nf">executeSteps</span><span class="o">(</span><span class="kt">def</span> <span class="n">stepNames</span><span class="o">,</span> <span class="kt">def</span> <span class="n">expectedResults</span><span class="o">)</span> <span class="o">{</span>

    <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">WsdlTestRequestStepResult</span><span class="o">&gt;</span> <span class="n">results</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">WsdlTestRequestStepResult</span><span class="o">&gt;()</span>

    <span class="n">log</span><span class="o">.</span><span class="na">info</span> <span class="s2">"DB ARCHIVE TESTING STARTET AT: ${LocalDateTime.now().toString()}"</span>

    <span class="n">stepNames</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span> <span class="n">stepName</span> <span class="o">-&gt;</span>
        <span class="n">WsdlTestRequestStepResult</span> <span class="n">result</span> <span class="o">=</span> <span class="n">testFunctions</span><span class="o">.</span><span class="na">runTestStep</span><span class="o">(</span><span class="n">stepName</span><span class="o">);</span>
        <span class="n">results</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">stepName</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="n">stepNames</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span> <span class="n">stepName</span> <span class="o">-&gt;</span>
        <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">validateTestStep</span><span class="o">(</span><span class="n">stepName</span><span class="o">,</span> <span class="n">sql</span><span class="o">,</span> <span class="n">results</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">stepName</span><span class="o">),</span> <span class="n">dbTestUtils</span><span class="o">.</span><span class="na">verify</span><span class="o">,</span> <span class="n">expectedResults</span><span class="o">);</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span> <span class="n">result</span>
    <span class="o">}</span>

    <span class="n">sql</span><span class="o">.</span><span class="na">close</span><span class="o">()</span>

      <span class="n">log</span><span class="o">.</span><span class="na">info</span> <span class="s2">"DB ARCHIVE TESTING ENDED AT: ${LocalDateTime.now().toString()}"</span>
  <span class="o">}</span>

  <span class="cm">/**
   * Run test step
   * @param stepName - Name of the test step to execute
   * @return Result of test step execution
   */</span>
  <span class="n">WsdlTestRequestStepResult</span> <span class="nf">runTestStep</span><span class="o">(</span><span class="n">String</span> <span class="n">stepName</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">//TODO additional preconditions here</span>

    <span class="n">WsdlTestRequestStepResult</span> <span class="n">response</span> <span class="o">=</span> <span class="n">testRunner</span><span class="o">.</span><span class="na">runTestStepByName</span><span class="o">(</span><span class="n">stepName</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">response</span>
  <span class="o">}</span>

  <span class="cm">/**
   * Validates test step
   * @param stepName - name of Test Step e.g. "RequestStartOfSupply"
   * @param sql - reference to groovy.sql.Sql object
   * @param response - reference to the Test Result response
   */</span>
  <span class="kt">def</span> <span class="nf">validateTestStep</span><span class="o">(</span><span class="n">String</span> <span class="n">stepName</span><span class="o">,</span> <span class="n">Sql</span> <span class="n">sql</span><span class="o">,</span> <span class="n">WsdlTestRequestStepResult</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">//TODO implement result validation by using results from database</span>
  <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<h1 id="conclusion">Conclusion</h1>

<p>With the little bit of tricks we can very easily write reusable <a href="http://groovy-lang.org/">Groovy</a> code inside <a href="https://www.soapui.org/">SoapUI</a> <a href="https://support.smartbear.com/readyapi/docs/soapui/steps/groovy.html">Groovy Test Step</a> where we are going to initialize and than reuse database connection in a form of <a href="http://groovy-lang.org/">Groovy</a> object. This approach allow us to effectively store database credentials on disk in possibly encrypted form, thus avoiding hardcoding these credentials in specific <a href="https://www.soapui.org/jdbc/reference/the-jdbc-request-window.html">JDBC Request</a> test step. This also adds to more flexibility and code reusability within <a href="https://www.soapui.org/">SoapUI</a>.</p>
:ET